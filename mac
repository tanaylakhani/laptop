#!/bin/sh

# Welcome to the redbooth laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.
# Usage:
#  curl --remote-name https://raw.githubusercontent.com/redbooth/laptop/master/mac
#  sh mac 2>&1 | tee ~/laptop.log
#

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_bash_profile() {
  local text="$1" bash_profile
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.bash_profile.local" ]; then
    bash_profile="$HOME/.bash_profile.local"
  else
    bash_profile="$HOME/.bash_profile"
  fi

  if ! grep -Fqs "$text" "$bashrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$bash_profile"
    else
      printf "\n%s\n" "$text" >> "$bash_profile"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.bashrc" ]; then
  touch "$HOME/.bashrc"
fi

# shellcheck disable=SC2016
append_to_bash_profile 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_cask_install_or_upgrade() {
  if ! brew_is_installed "$1"; then
    brew cask install "$@"
  fi
}

brew_is_installed() {
  local name
  name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name
  name="$(brew_expand_alias "$1")"

  ! brew outdated --quiet "$name" >/dev/null
}

brew_tap() {
  brew tap "$1" --repair 2> /dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/.*\//, ""); gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name
  name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

ssh_key_installed() {
  mkdir -p $HOME/.ssh
  ls -la $HOME/.ssh | grep -E "dsa|rsa"
}

generate_ssh_key() {
  if [ ! ssh_key_installed]; then
    fancy_echo "Generating an ssh public/private key pair for you."
    fancy_echo "Important: Accept the default path and filename!"
    fancy_echo "Important: Make sure you type in a secure passphrase!!!"
    echo
    read -p "Type in your email:" USER_EMAIL
    ssh-keygen -t rsa -b 4096 -C "$1"
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_rsa
    echo
    fancy_echo "Now add your key to github.com (https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account)"
  fi
}

is_xcode_installed() {
  /usr/bin/xcode-build -v &> /dev/null
  "$?" -eq "0"
}

fancy_echo "Checking if XCode is installed..."

if [ ! is_xcode_installed ]; then
  fancy_echo "Unfortunately though you may not be an ios developer you still need to install xcode."
  fancy_echo "Go to the Mac App Store and install xcode and try again..."
  exit 1
fi

fancy_echo "Installing developer tools ..."
set +e
xcode-select --install
set -e

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_bash_profile '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_bash_profile 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew_tap 'thoughtbot/formulae'
brew_tap 'homebrew/nginx'
brew_tap 'homebrew/versions'

brew update

fancy_echo "Updating Unix tools ..."
brew_install_or_upgrade 'git'
brew_install_or_upgrade 'openssl'
brew_install_or_upgrade 'reattach-to-user-namespace'
brew_install_or_upgrade 'tmux'

fancy_echo "Updating image tools ..."
brew_install_or_upgrade 'imagemagick'

fancy_echo "Updating programming languages ..."
brew_install_or_upgrade 'libyaml' # should come after openssl
brew_install_or_upgrade 'libffi'
brew_install_or_upgrade 'rbenv'
brew_install_or_upgrade 'ruby-build'

fancy_echo "Updating databases ..."
brew_install_or_upgrade 'homebrew/versions/mysql55'
MYSQL55_VERSION=`ls -la /usr/local/opt/ | grep mysql | cut -d "/" -f4`
brew switch mysql55 $MYSQL55_VERSION
brew link mysql55 --force

brew_install_or_upgrade 'redis'
brew_install_or_upgrade 'memcached'
brew_install_or_upgrade 'sqlite3'
brew_launchctl_restart 'mysql55'
brew_launchctl_restart 'redis'
brew_launchctl_restart 'memcached'

fancy_echo "Updating web servers ..."
brew_install_or_upgrade 'nginx'
brew_launchctl_restart 'nginx'

fancy_echo "Updating search engines ..."
brew_cask_install_or_upgrade 'java'
brew install Caskroom/cask/java
brew_install_or_upgrade 'elasticsearch'
brew_launchctl_restart 'elasticsearch'

fancy_echo "Configuring Ruby ..."
find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="2.1.2"
# ruby_version="$(find_latest_ruby)"
# shellcheck disable=SC2016
append_to_bash_profile 'export PATH="$HOME/.rbenv/bin:$PATH"'
append_to_bash_profile "export RBENV_VERSION=$ruby_version" 1
append_to_bash_profile 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))
brew link openssl --force

fancy_echo "Installing and configuring Node..."
node_version="0.12.2"
if ! node -v | grep v$node_version; then
  fancy_echo "Installing Node & npm  ($node_version) ..."
  curl -L http://git.io/n-install | bash -s -- -y $node_version
  export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"  # Added by n-install (see http://git.io/n-install-repo)
fi

generate_ssh_key

fancy_echo "Success!!!"
fancy_echo "Your Redbooth development environment is almost ready ;)"
fancy_echo "Now change to $HOME/Sites and type:"
fancy_echo " git clone git@github.com:teambox/cloud-packages.git"
fancy_echo " cd cloud-packages"
fancy_echo " bundle config repo.redbooth.com repo:askfortheredboothrepopassword"
fancy_echo " make setup #just once"

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi
